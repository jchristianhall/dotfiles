# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

# CoffeeScript
'.source.coffee':
  'log':
    'prefix': 'log'
    'body': 'console.log($1)$0'

  # Jasmine
  'afterEach':
    'prefix': 'af'
    'body': """
      afterEach(->
        ${0}
      )
    """

  'beforeEach':
    'prefix': 'be'
    'body': """
      beforeEach(->
        ${0}
      )
    """

  'context':
    'prefix': 'con'
    'body': """
      context('${1:description}', ->
        ${0}
      )
    """

  'Describe block':
    'prefix': 'de'
    'body': """
      describe('${1:description}', ->
        ${0}
      )
    """

  'it':
    'prefix': 'it'
    'body': """
      it('${1:description}', ->
        expect(${2:false}).${3:ok}${0}
      )
    """

# CSS
'.source.css, .source.scss, .source.sass':
  '@import':
    'prefix': 'import'
    'body': '@import \'$0\';'
    'description': 'Import style rules from other style sheets.'
    'descriptionMoreURL': 'https://developer.mozilla.org/en-US/docs/Web/CSS/@im\
    port'
  '@charset':
    'prefix': 'charset'
    'body': '@charset \'${1:UTF-8}\';$0'
    'description': 'Specifies the character encoding used in the style sheet.'
    'descriptionMoreURL': 'https://developer.mozilla.org/en-US/docs/Web/CSS/@ch\
    arset'
  '@define: Component':
    'prefix': 'def'
    'body': '/** @define ${1:ComponentName} */${0}'
  '@define: utilities':
    'prefix': '@defu'
    'body': '/** @define utilities */${0}'

# Comments
'.source.css, .source.js':
  'Comment Section':
    'prefix': 'cs'
    'body': """
      /* ${1:Section comment block}
         ======================================================================\
         ==== */$0
    """
  'Generic Comment Block':
    'prefix': 'gcb'
    'body': """
      /**
       * $1
       */$0
    """
  'Class Comment Block':
    'prefix': 'ccb'
    'body': """
      /**
       * @class       ${1:ClassName}
       * @extends     {}
       * @description description
       */$0
    """
  'Comment Footnote':
    'prefix': 'cf'
    'body': '/* ${1:1} */'

'.source.js':
  'log':
    'prefix': 'log'
    'body': 'console.log($1)$0'

# Marionette
'.source.js':
  'Marionette Layout View':
    'prefix': 'mlv'
    'body': """
      import './index.scss'
      import template from './index.tpl'
      import { LayoutView } from 'backbone.marionette'

      /**
       * @class       ${1:ClassName}
       * @extends     {LayoutView}
       * @description Description
       */
      const ${1:ClassName} = LayoutView.extend({
        template
      })

      export default ${1:ClassName}
      $0
    """
  'Marionette Item View':
    'prefix': 'miv'
    'body': """
      import './index.scss'
      import template from './index.tpl'
      import { ItemView } from 'backbone.marionette'

      /**
       * @class       ${1:ClassName}
       * @extends     {ItemView}
       * @description Description
       */
      const ${1:ClassName} = ItemView.extend({
        template
      })

      export default ${1:ClassName}
      $0
    """
  'Marionette Composite View':
    'prefix': 'mcv'
    'body': """
      import './index.scss'
      import template from './index.tpl'
      import { CompositeView } from 'backbone.marionette'

      /**
       * @class       ${1:ClassName}
       * @extends     {CompositeView}
       * @description Description
       */
      const ${1:ClassName} = CompositeView.extend({
        template
      })

      export default ${1:ClassName}
      $0
    """
  'Marionette Collection View':
    'prefix': 'mcov'
    'body': """
      import './index.scss'
      import template from './index.tpl'
      import { CollectionView } from 'backbone.marionette'

      /**
       * @class       ${1:ClassName}
       * @extends     {CollectionView}
       * @description Description
       */
      const ${1:ClassName} = CollectionView.extend({
        template
      })

      export default ${1:ClassName}
      $0
    """
  'Jest Test Template':
    'prefix': 'jt'
    'body': """
      import ${1:Subject} from '../$1'
      let subject
      describe('$1', () => {
        beforeAll(() => {
          subject = new $1()
        })
        it('fails a test', () => {
          expect(subject).toBeUndefined()$0
        })
      })
    """

# Underscore Templates
'.text.html':
  'Underscore':
    'prefix': '_'
    'body': '<% $0 %>'

  'Underscore (interpolation)':
    'prefix': '_='
    'body': '<%= $0 %>'

  'Underscore (if)':
    'prefix': '_if'
    'body': '<% if (${1}) { %>${0}'

  'Underscore (else if)':
    'prefix': '_elsif'
    'body': '<% } else if (${1}) { %>${0}'

  'Underscore (else)':
    'prefix': '_else'
    'body': '<% } else { %>${0}'

  'Underscore (for in)':
    'prefix': '_forin'
    'body': '<% for (var ${1:i} in ${2:value}) { %>${0}'

  'Underscore (for of)':
    'prefix': '_forof'
    'body': '<% for (var ${1:item} in ${2:value}) { %>${0}'
